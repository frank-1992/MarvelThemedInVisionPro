#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def "stage_gachimuchi" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
        references = @MarvelModels/Others/stage_gachimuchi.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
        float3 xformOp:scale = (0.005, 0.005, 0.005)
        float3 xformOp:translate = (0.051700383, -0.026657453, -0.08724719)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "panggung32_obj_cleaner_materialmerger_gles"
                {
                    reorder nameChildren = ["Object_2", "Object_3", "Object_4", "Object_5", "Object_6", "Object_7", "Object_8", "Object_9", "Object_10", "Object_11", "Object_12", "Object_13", "Object_14", "Object_15", "Object_16", "Object_17", "Object_18", "Object_19", "Object_20", "Object_21", "Object_22", "Object_23", "Object_24", "Object_25", "Object_26", "Object_27", "Object_28", "Object_29", "Object_30", "Object_31", "Object_32", "Object_33", "Object_34", "Object_35", "Object_36", "Object_37", "Object_38", "Object_39", "Object_40", "Object_41", "Object_42", "Object_43", "Object_44", "Object_45", "Object_46", "Object_47", "Object_48"]
                    over "Object_3" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        customData = {
                            float3 rotationEulerHint = (0, -3.369395e-11, -2.537606e-8)
                        }
                    )
                    {
                        rel material:binding = </Root/Material> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        quatf xformOp:orient = (1, -2.1375493e-19, -1.6846975e-11, -1.268803e-8)
                        float3 xformOp:scale = (1, 1, 1)
                        float3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        over "Object_1" (
                            active = true
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            customData = {
                                float3 rotationEulerHint = (0, 0, 0)
                            }
                        )
                        {
                            rel material:binding = </Root/Material> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                            quatf xformOp:orient = (1, 0, 0, 0)
                            float3 xformOp:translate = (0, 0, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }
                    }

                    over "Object_10"
                    {
                        over "Object_8" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Root/stage_gachimuchi/Materials/lampu_atas_hitam> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "Object_6"
                    {
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (1, 1, 1)
                        float3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        over "Object_4" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Root/stage_gachimuchi/Materials/Bagian_Besi> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }
            }
        }

        over "Materials"
        {
            over "Lingkar_utama_1"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "TV__Di_isi_Video"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "TV_pinggir_cagak"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "belakang_TV_di_isi_video_animated"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "di_isi_gambar_aja"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "lantai"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "lingkar_utama_2"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "panggung_belakang"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "panggung_kecil_1"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "pangung_2_kotak"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "pangung_kecil_2"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "pangung_kecil_3"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "pangung_kecil_4"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "speaker_monitor"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "tangga_2"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "Bagian_Besi"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "Mele_Gender"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "bagian_Cahaya"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "bunder_banyak_ungu"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "default"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "lampu_atas_hitam"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "pilar"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "tiang_tangga"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }
    }

    def Material "Material"
    {
        asset inputs:background = @Pictures/marvel.png@ (
            customData = {
                dictionary realitykit = {
                    float2 sizeInSubgraph = (142, 53)
                    int stackingOrderInSubgraph = 0
                }
            }
        )
        token inputs:frame:stPrimvarName = "st" (
            customData = {
                dictionary realitykit = {
                    float2 sizeInSubgraph = (203.5, 53)
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/Material/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/Material/UsdPreviewSurface.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface" (
            active = false
        )
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (74.25, 99.5)
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        def Shader "UsdPreviewSurface" (
            active = true
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:diffuseColor.connect = </Root/Material/diffuseColor.outputs:rgb>
            color3f inputs:emissiveColor = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:metallic = 0
            normal3f inputs:normal = (1, 1, 1)
            float inputs:opacity = 1
            float inputs:opacityThreshold
            float inputs:roughness = 0
            token outputs:surface
        }

        def Shader "diffuseColor"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @Pictures/marvel.jpeg@
            float2 inputs:st.connect = </Root/Material/diffuseColor/TexCoordReader.outputs:result>
            color3f outputs:rgb

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </Root/Material/UsdPreviewSurface.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }
    }

    def Xform "ParticleEmitter"
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.9668119, 0.28943956, -0.4955353)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                int64 burstCount = 300
                float3 emissionDirection = (0, 1, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Plane"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 1.4
                float particleSpeedVariation = 0.1
                float3 shapeSize = (0.05, 1, 0.05)
                bool spawnInheritParentColor = 1
                token spawnOccasion = "OnDeath"
                float spawnSpreadFactor = 0.2
                float spawnSpreadFactorVariation = 0.1
                float spawnVelocityFactor = 0.1
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, -0.1, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 2
                    float birthRateVariation = 1
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 2
                    float dampingFactor = 3.2
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 0
                    float frameRateVariation = 0
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 3
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0
                    token opacityOverLife = "Constant"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flaresheet.exr@
                    double particleLifeSpan = 0.52
                    double particleLifeSpanVariation = 0
                    float particleMass = 1
                    float particleMassVariation = 0
                    float particleSize = 0.004
                    float particleSizeVariation = 0
                    float3 radialGravityCenter = (0, 12, 0)
                    float radialGravityStrength = -1
                    int64 rowCount = 2
                    float sizeMultiplierAtEndOfLifespan = 1
                    float sizeMultiplierAtEndOfLifespanPower = 1
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0.1
                    float4 startColorA = (1, 0.051991113, 1, 1)
                    float4 startColorB = (0, 0.98059916, 1, 1)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -0.15, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 39000
                    float birthRateVariation = 8000
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 2
                    float dampingFactor = 4
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 12
                    float frameRateVariation = 3
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 3
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0.2
                    float noiseScale = 3
                    float noiseStrength = 0.02
                    token opacityOverLife = "LinearFadeOut"
                    float particleAngle = 0
                    float particleAngleVariation = 2
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flaresheet.exr@
                    double particleLifeSpan = 1.8
                    double particleLifeSpanVariation = 0.5
                    float particleMass = 0.75
                    float particleMassVariation = 0.5
                    float particleSize = 0.03
                    float particleSizeVariation = 0.01
                    float3 radialGravityCenter = (0, -3, -3)
                    float radialGravityStrength = 0
                    int64 rowCount = 2
                    float sizeMultiplierAtEndOfLifespan = 0.01
                    float sizeMultiplierAtEndOfLifespanPower = 0.03
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 3
                    float4 startColorA = (1, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }
    }

    def Xform "ParticleEmitter_1"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.1540697, 0.20770347, -0.54527706)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                token birthLocation = "Surface"
                int64 burstCount = 300
                float3 emissionDirection = (0, 1, 0)
                double emissionDuration = 1
                double emissionDurationVariation = 0
                token emitterShape = "Plane"
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isLocal = 0
                bool isSpawningEnabled = 1
                bool loops = 1
                float particleSpeed = 1.4
                float particleSpeedVariation = 0.1
                float3 shapeSize = (0.05, 1, 0.05)
                bool spawnInheritParentColor = 1
                token spawnOccasion = "OnDeath"
                float spawnSpreadFactor = 0.2
                float spawnSpreadFactorVariation = 0.1
                float spawnVelocityFactor = 0.1
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float3 acceleration = (0, -0.1, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 2
                    float birthRateVariation = 1
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 2
                    float dampingFactor = 3.2
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 0
                    float frameRateVariation = 0
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 3
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0
                    token opacityOverLife = "Constant"
                    float particleAngle = 0
                    float particleAngleVariation = 0
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flaresheet.exr@
                    double particleLifeSpan = 0.52
                    double particleLifeSpanVariation = 0
                    float particleMass = 1
                    float particleMassVariation = 0
                    float particleSize = 0.004
                    float particleSizeVariation = 0
                    float3 radialGravityCenter = (0, 12, 0)
                    float radialGravityStrength = -1
                    int64 rowCount = 2
                    float sizeMultiplierAtEndOfLifespan = 1
                    float sizeMultiplierAtEndOfLifespanPower = 1
                    token sortOrder = "IncreasingDepth"
                    float spreadingAngle = 0.1
                    float4 startColorA = (1, 0.051991113, 1, 1)
                    float4 startColorB = (0, 0.98059916, 1, 1)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 1
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                    float3 acceleration = (0, -0.15, 0)
                    token animationRepeatMode = "Looping"
                    token billboardMode = "Billboard"
                    float birthRate = 39000
                    float birthRateVariation = 8000
                    token blendMode = "Additive"
                    float colorEvolutionPower = 1
                    int64 columnCount = 2
                    float dampingFactor = 4
                    float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                    float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                    float frameRate = 12
                    float frameRateVariation = 3
                    int64 initialFrame = 0
                    int64 initialFrameVariation = 3
                    bool isAnimated = 1
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0.2
                    float noiseScale = 3
                    float noiseStrength = 0.02
                    token opacityOverLife = "LinearFadeOut"
                    float particleAngle = 0
                    float particleAngleVariation = 2
                    float particleAngularVelocity = 0
                    float particleAngularVelocityVariation = 0
                    asset particleImage = @ParticleEmitterPresetTextures/flaresheet.exr@
                    double particleLifeSpan = 1.8
                    double particleLifeSpanVariation = 0.5
                    float particleMass = 0.75
                    float particleMassVariation = 0.5
                    float particleSize = 0.03
                    float particleSizeVariation = 0.01
                    float3 radialGravityCenter = (0, -3, -3)
                    float radialGravityStrength = 0
                    int64 rowCount = 2
                    float sizeMultiplierAtEndOfLifespan = 0.01
                    float sizeMultiplierAtEndOfLifespanPower = 0.03
                    token sortOrder = "IncreasingID"
                    float spreadingAngle = 3
                    float4 startColorA = (1, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    float stretchFactor = 0
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                    float3 vortexDirection = (0, 1, 0)
                    float vortexStrength = 0
                }
            }
        }
    }

    def "Dare_Devil__Fortnite_Marvel_Collab_Skin" (
        active = true
        prepend references = @MarvelModels/Hero/Dare_Devil__Fortnite_Marvel_Collab_Skin.usdz@
    )
    {
        float3 xformOp:scale = (0.005, 0.005, 0.005)
        float3 xformOp:translate = (0.03366171, 0.17294285, -0.10333341)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "FileParticle" (
        active = true
        prepend references = @FileParticle.usda@
    )
    {
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (-0.7353593, 4.451722e-7, -0.037308156)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "FileParticle_1" (
        active = true
        prepend references = @FileParticle.usda@
    )
    {
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (0.8462291, 6.631017e-7, -0.037308156)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

